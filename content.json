{"meta":{"title":"For You","subtitle":"Designed by XX","description":"Funny Website","author":"StarFishing","url":"http://starfishing.github.io"},"pages":[{"title":"404","date":"2018-08-01T03:26:26.000Z","updated":"2018-08-01T03:26:26.379Z","comments":true,"path":"404/index.html","permalink":"http://starfishing.github.io/404/index.html","excerpt":"","text":""},{"title":"About me(XL)","date":"2018-08-02T12:54:12.000Z","updated":"2018-10-10T13:33:36.321Z","comments":true,"path":"about/index.html","permalink":"http://starfishing.github.io/about/index.html","excerpt":"","text":"故事开始的地方每一篇博客都会认真对待，或赠与看到的你。 个人主页；项目演示：Tootips , 飘城旅行。前端开发 || PS || HTML || CSS || Node.js || vue.js"},{"title":"分类","date":"2018-08-02T12:39:54.000Z","updated":"2018-08-03T08:46:25.920Z","comments":false,"path":"categories/index.html","permalink":"http://starfishing.github.io/categories/index.html","excerpt":"","text":""},{"title":"留言板","date":"2018-08-03T04:18:05.000Z","updated":"2018-08-03T08:04:00.006Z","comments":true,"path":"message/index.html","permalink":"http://starfishing.github.io/message/index.html","excerpt":"","text":""},{"title":"search","date":"2018-08-01T03:26:08.000Z","updated":"2018-08-01T03:26:08.812Z","comments":true,"path":"search/index.html","permalink":"http://starfishing.github.io/search/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-08-02T12:52:18.000Z","updated":"2018-08-03T08:45:16.847Z","comments":false,"path":"tags/index.html","permalink":"http://starfishing.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"js笔记","slug":"js笔记","date":"2018-09-07T12:30:55.948Z","updated":"2018-09-12T13:01:30.199Z","comments":true,"path":"2018/09/07/js笔记/","link":"","permalink":"http://starfishing.github.io/2018/09/07/js笔记/","excerpt":"","text":"####null和undefined两者数值相等，类型不同 1if（null==undefined）返回true；if（null===undefined）返回false,两者不同类型； 123var test=&quot;2e3&quot;;test=parseFloat(test);//test=parseInt(test);alert(test)；2000（转换为float时会用科学计数法，结果为2000）//2（转换为int型结果为2） null支持自增自减（–、++）switch、case语句：若语句中没有break（在匹配到其中一个case的情况下），条件语句将会顺序执行，不会考虑下面case的情况,直到遇到break；若没有匹配的case，将会执行default，也会执行default下面的case（没有break的情况下）；1234567891011121314151617181920/*执行结果为 01case 02case 03case*/var i=1;switch (i)&#123; case 1:document.write(&quot;01case&quot;); case 2:document.write(&quot;02case&quot;); case 3:document.write(&quot;03case&quot;);&#125;/*执行结果为nofit 03case （当有brake时，执行结果为nofit）*/var i=5;switch (i)&#123; case 1: document.write(&quot;01case&quot;); case 2: document.write(&quot;02case&quot;); default： document.write(&quot;nofit&quot;); //break； case 3: document.write(&quot;03case&quot;);&#125; continue语句跳过当前花括号内的语句；打印九九乘法表123456789101112document.write(&apos;&lt;table border=&quot;1&quot; cellpading=&quot;0&quot; width=&quot;800&quot;&gt;&apos;);for(var i=1;i&lt;=9;i++)//for(var i=9;i&gt;=1;i--)注释内容用来打印倒得乘法表 &#123; document.write(&apos;&lt;tr&gt;&apos;); for(var j=1;j&lt;=i;j++)//for(var j=i;j&gt;=1;j--) &#123; document.write(&apos;&lt;td bgcolor=&quot;grey&quot;&gt;&apos;+j+&apos;x&apos;+i+&apos;=&apos;+i*j+&apos;&lt;/td&gt;&apos;) &#125; document.write(&apos;&lt;/tr&gt;&apos;); &#125; document.write(&apos;&lt;/table&gt;&apos;); 百钱买百鸡问题1234567891011121314var x,y,z;//x为公鸡数量，y为母鸡数量，z为小鸡数量 var cost;//费用 for(x=0;x&lt;=20;x++)&#123;/*公鸡最多20只*/ for(y=0;y&lt;=33;y++)&#123;/*母鸡最多33只*/ z=100-x-y; if(z%3==0)&#123;/*刚好满足小鸡数为整数，且刚好一百只鸡*/ cost=5*x+3*y+z/3; if(cost==100)&#123; document.write(&quot;公鸡&quot;+x+&quot;只\\n&quot;+&quot;母鸡&quot;+y+&quot;只\\n&quot;+&quot;小鸡&quot;+z+&quot;只&lt;br&gt;&quot;); &#125; &#125; &#125; &#125; 函数参数问题1234567function calc1(num1,num2)&#123; num1=num1||1;/*当函数调用不给参数时，num会取值为1，当有参数时，使用原来的参数*/ num2=num2||2;/*同理*/ return (num1+num2); &#125;calc1(); 可以通过arguments对象实现可变参数的函数，也可以实现默认值的效果；12345678910111213141516171819202122232425262728/*可变参数形式的函数*/function test()&#123; var paramsNum=arguments.length;/*得到传入参数的个数*/ var sum=0; for(var i=0;i&lt;paramsNum;i++) &#123; sum+=arguments[i]; &#125; return sum; &#125;function test1()&#123; //var x=arguments[0]||2; var x=arguments[0]?arguments[0]:2; /*同上一句话等价，但是三元运算符只对arguments对象生效*/ var y=arguments[1]||3; return (x+y);&#125;document.write(test(1,3,6,7,9)+&quot;&lt;/br&gt;&quot;);//26document.write(test1(3,5)+&quot;&lt;/br&gt;&quot;);//8document.write(test1());//5 通过 isFinite()检测是否为无穷值（函数含义等同于判断这个数值是否有穷）；12var x=Infinity;/-Infinity,0/0alert(isFinite(x));//false 创建一个普通的空对象；12var obj=Object.create(Object.prototype);或者var obj=Object.create(null); hasOwnPropertype 检测某个对象是否含有指定的自身属性(不包括从Object继承而来的属性。var obj=Object.create({x:1})) 属性值中的get和set方法12345678910111213141516171819var obj=&#123; x:1, y:2, z:3, get zhouchang() &#123; return this.x+this.y+this.z; &#125;, set doublecircle(val) &#123; this.x*=val; this.y*=val; this.z*=val; &#125;&#125;document.write(obj.zhouchang);//没有该属性时调用get方法，返回结果6obj.doublecircle=3;//赋值时没有该属性，调用set方法document.write(obj.zhouchang);//18document.write(obj.x);//3，此时属性值被改变 获取对象属性值的三种方式12345for(var p in obj)Object.keys(obj)Object.getOwnPropertyNames(obj) 正则匹配。exec（string）函数1234567891011var str=&quot;this is a test hello maIzi hello world&quot;;var patt=/i/g;var arr;/*下次执行时会从已经匹配到的元素的下一个位置开始继续查找，但是每次只匹配一个，所以数组arr中只存在一个元素*/while((arr=patt.exec(str))!==null) &#123; var msg=&apos;Find &apos;+arr[0]+&apos;!&apos;; msg+=&apos;the next position is &apos;+patt.lastIndex; console.log(msg); &#125; unshift 向数组头部添加元素 。shift将素组元素从头部压出。123456/*声明新数组*/var arr=[]; /*向数组头部添加元素* 代码注释部分为从尾部向数组假如元素，也从尾部删除*/arr.unshift(1,2,3,&apos;test&apos;,null);//arr.push(&apos;c&apos;,&apos;f&apos;,1,4,undefinde);/*从头部删除元素*/arr.shift();//arr.pop(); 对浏览器适配以及监听等方法的封装12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061var EventUtil=&#123;addHandle:function(element,type,handle)&#123;if(element.addEventListener)&#123;/*添加监听*/ element.addEventListener(type,handle,false);&#125;else if(element.attachEvent)&#123; element.attachEvent(&apos;on&apos;+type,handle);&#125;else&#123; element[&apos;on&apos;+type]=handle;&#125;&#125;,removeHandler:function(element,type,handle)&#123;/*移除监听*/ if(element.removeEventListener)&#123; element.removeEventListener(type,handle,false); &#125; else if(element.datachEvent)&#123; element.datachEvent(&apos;on&apos;+type,handle); &#125; else&#123; element[&apos;on&apos;+type]=null; &#125;&#125;，getTarget:function(event)&#123; return event.target||event.srcElement;&#125;,getEvent:function(event)&#123; /*获取事件对象*/ return event?event:window.event;&#125;,preventDefault:function(event)&#123;//*取消默认事件*/if(event.preventDefault)&#123; event.preventDefault();&#125;else &#123; event.returnValue=false;&#125;&#125;,stopPropagation:function(event)&#123; /*取消冒泡*/ if(event.stopPropagation)&#123; event.stopPropagation(); &#125; else &#123; event.cancelBubble=true; &#125;&#125;&#125;; 对封装的函数进行测试123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;EventUtil.js&quot;&gt;&lt;/script&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;事件&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=&quot;button&quot; id=&quot;btn1&quot; value=&quot;按钮一&quot; /&gt;&lt;input type=&quot;button&quot; id=&quot;btn2&quot; value=&quot;按钮二&quot; /&gt;&lt;input type=&quot;button&quot; id=&quot;btn3&quot; value=&quot;按钮三&quot; /&gt;&lt;script type=&quot;text/javascript&quot;&gt;var btn1=document.getElementById(&quot;btn1&quot;);var btn3=document.getElementById(&quot;btn3&quot;);var btn2=document.getElementById(&quot;btn2&quot;);/*var count=0;btn1.onclick=function()&#123; alert(&quot;按钮点击事件&quot;+count++); if(count==2) &#123; btn1.onclick=null; &#125;&#125;*//*false表明按冒泡顺序弹出，true为捕获截断，即从外往里，先是document，然后HTML....*//*var count=0;var handle2=function()&#123; alert(&quot;成功移除&quot;);&#125;var handle1=function()&#123;alert(&quot;按钮点击事件次数&quot;+count++); if(count==2) &#123; btn1.removeEventListener(&apos;click&apos;,handle1,false); &#125;&#125;//btn1.addEventListener(&apos;click&apos;,handle1,false);EventUtil.addHandle(btn1,&apos;click&apos;,handle1);*/ /*var e=e||window.event; if(typeof e.cancelBubble==&apos;undefinded&apos;) &#123; e.stopPropagation(); &#125; else &#123; e.cancelBubble=true; &#125;*/ /*btn1.onclick=function()&#123; alert(&quot;按钮点击事件&quot;);&#125;*//*function test() &#123; alert(&quot;按钮点击事件&quot;)；&#125;*/var test2=function()&#123; alert(&quot;按钮点击事件&quot;);&#125;;EventUtil.addHandle(btn2,&apos;click&apos;,test2);var test3=function()&#123;alert(&apos;事件移除&apos;);EventUtil.removeHandler(btn2,&apos;click&apos;,test2);&#125;;EventUtil.addHandle(btn3,&apos;click&apos;,test3);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 关于自调用函数及闭包问题12345678910111213141516171819202122/*将函数指定给变量的形式*/var g=function()&#123; console.log(&quot;excel g&quot;); &#125;/*自调用函数*/(function()&#123; var a=6; var b=5; function f() &#123; alert(a); &#125; window.f=f;&#125;)();f(); 首先我们看自调用函数部分，指定window.f=f；（如果需要的函数比较多，都可以按同样的方式指定，以便在外部调用）目的是在自调用函数外部可以直接使用f（）来调用我们需要的函数，之所以要用这种方式是因为可以减少全局变量的声明，并且不会再函数执行完销毁变量，可以让声明的变量一直在系统中占有一定内存，不会销毁，也实现了js的闭包。 其次上面两块代码存在问题，在按上述方式写后，系统会执行并没有调用的g()函数，而不会再往下执行自调用函数，也就是说按上面方式生命的函数g（）,不可以与自调用函数共存，需要用字面量形式或者函数名的形式声明函数，避免程序出现错误。 闭包的理解12345678910111213function f()&#123; var a=2; var b=23; return function f2() &#123; alert(a+b); &#125; &#125;var res=f();res();在跳出f()函数外面。里面的函数f2()仍然可以调用f()的词法环境，内部函数的scope保存了f()的词法环境，这也是闭包的特性；","categories":[{"name":"javascript","slug":"javascript","permalink":"http://starfishing.github.io/categories/javascript/"}],"tags":[{"name":"js","slug":"js","permalink":"http://starfishing.github.io/tags/js/"}]},{"title":"快把我哥带走","slug":"02","date":"2018-09-02T08:15:04.089Z","updated":"2018-09-02T08:14:10.948Z","comments":true,"path":"2018/09/02/02/","link":"","permalink":"http://starfishing.github.io/2018/09/02/02/","excerpt":"拥有一个每天耍贱整蛊妹妹、毫无家庭感的哥哥是一种什么感受，油炸还是蒸锅。时秒（张子枫饰）只希望哥哥时分（彭昱畅饰）彻底消失，连珍贵的生日愿望都是“快把我哥带走”。不料愿望成真，哥哥变成闺蜜妙妙（赵今麦饰）的哥哥，时秒同情妙妙的同时心里暗爽摆脱“大魔王”。变成独生女的时秒感觉生活无限美好，但却发现时分除了整天和好基友甄开心（孙泽源饰）、万岁（方翔锐饰）插科打诨、整蛊妹妹妙妙之外，还隐藏着不为人知的秘密 。","text":"拥有一个每天耍贱整蛊妹妹、毫无家庭感的哥哥是一种什么感受，油炸还是蒸锅。时秒（张子枫饰）只希望哥哥时分（彭昱畅饰）彻底消失，连珍贵的生日愿望都是“快把我哥带走”。不料愿望成真，哥哥变成闺蜜妙妙（赵今麦饰）的哥哥，时秒同情妙妙的同时心里暗爽摆脱“大魔王”。变成独生女的时秒感觉生活无限美好，但却发现时分除了整天和好基友甄开心（孙泽源饰）、万岁（方翔锐饰）插科打诨、整蛊妹妹妙妙之外，还隐藏着不为人知的秘密 。第1集，第2集，第3集，第4集，第5集，第6集，第7集，第8集，第9集，第10集，第11集，第12集，第13集，第14集，第15集，第16集，第17集，第18集，第19集，第20集，第21集，第22集，第23集，第24集，第25集，第26集，第27集，第28集，第29集，第30集；","categories":[{"name":"TV_Source","slug":"TV-Source","permalink":"http://starfishing.github.io/categories/TV-Source/"}],"tags":[{"name":"视频","slug":"视频","permalink":"http://starfishing.github.io/tags/视频/"}]},{"title":"常用工具网站","slug":"01","date":"2018-08-06T14:56:04.380Z","updated":"2018-08-07T01:45:16.056Z","comments":true,"path":"2018/08/06/01/","link":"","permalink":"http://starfishing.github.io/2018/08/06/01/","excerpt":"这里包含了许多的创意网站，一些使用指导，和有趣的软件；","text":"这里包含了许多的创意网站，一些使用指导，和有趣的软件； 一、HTML&amp;&amp;CSS常用网站这部分包含了一些实用的网站，包括网页加载时的等待图标（跟进度条效果类似），以及让CSS样式对各个浏览器适配的网站。 1.按钮效果；这是一个包含了多种按钮效果的网站，里面是用HTML+CSS实现动态效果，你可以查看这个网址CreativeLinkEffects； 2.网页加载进度条这里拥有你所需要的绝大多数样式，你可以选择样式，将CSS文件复制到你的工程，这里提供两个网站preloaders和 loading； 3.CSS在线格式转换去掉繁琐的步骤，直接将你的CSS文件进行浏览器文件适配，你可以将转换好的文件拷贝会你的工程，请点击一下网址 Autoprefixer进行查看使用； 二、教程指导&amp;&amp;实用网址这里包含了搭建博客的教程网站以及一些用到的第三方数据存储端，还有一些平时会用到的小的实用网站； 1.视频解析网站利用这个网站可以省去你开会员的money，只需要将视频网址复制到这里 视频解析 就可以查看你需要的视频； 2.常用教程指导 windows下安装MySQL； 快速搭建属于自己的博客； 用hexo搭建自己的博客； nodejs安装及环境配置； 本博客主题； SQLyog破解； 3.在线图片瘦身 将你的图片在保持不破损的情况下进行压缩，减小图片大小，提高加载速度; 4.七牛七牛是一个很好用的图床，将你的图片上传到这里； 5.创意网站创造狮； 6.数据管理 LeanCloud 为开发者提供一流的工具、平台和服务，为应用开发加速。为移动开发提供强有力的后端支持。可以很方便的对你的博客文章访问量进行统计。 7.二维码生成器这是一个方便快捷生成自己想要的 二维码 的网站。你可以将网址、文本、或者生成自己名片二维码。","categories":[{"name":"工具","slug":"工具","permalink":"http://starfishing.github.io/categories/工具/"}],"tags":[{"name":"HTML，CSS，HEXO，Node.js","slug":"HTML，CSS，HEXO，Node-js","permalink":"http://starfishing.github.io/tags/HTML，CSS，HEXO，Node-js/"}]},{"title":"Actical","slug":"文集","date":"2018-08-04T12:37:13.432Z","updated":"2018-08-06T01:29:04.234Z","comments":true,"path":"2018/08/04/文集/","link":"","permalink":"http://starfishing.github.io/2018/08/04/文集/","excerpt":"静守纤尘，将[内心]的丰盈，安放在[平淡]安静的日子里，以文字的温婉，守一窗岁月静美，在流年里许一场清欢，与浅笑嫣然处，与你对望。","text":"静守纤尘，将[内心]的丰盈，安放在[平淡]安静的日子里，以文字的温婉，守一窗岁月静美，在流年里许一场清欢，与浅笑嫣然处，与你对望。 文章 2、谁是谁前世的牵绊？谁是谁今生的梵音？谁为谁望穿秋水？谁又拿浮生乱了流年？却原来，繁华过后一场空，誓言缱绻，梦非梦，蝶舞庄周，花非花。 3、这世间，许多事，求得，求之不得；许多梦，忘得，忘记不得。 4、时光无言，季节的流转，总是会有那么些许薄凉，一切都经过了，一切都走过了，一切都熬过了，生命的底色里，增了韧，添了柔。那么这时候平和下来的生命，就已经沉静到扰不乱，已经稳健到动不摇，已经淡定到风打不动。 5、真正的自由是在无所依傍之时，发现无路而处处是路…能行到水穷处，坐看云起时的人才算得上自由。这不是路的缘故，是心路。 6、一抹明媚，一瓣馨香。一片盎然，一望回眸。在清丽透彻的阳光下，便是一番风景。一盏香茗，一卷书墨，一落窗明，一艾心情。在思绪幽然的专注中，便是一回自得。 7、我喜欢出发。凡是到达了的地方，都属于昨天。哪怕那山再青，那水再秀，那风再温柔。太深的流连便成了一种羁绊，绊住的不仅有双脚，还有未来。 8、如果真心只会换来心碎，宁愿换一季落花，就算凋零也要芳香远扬，不让心事那么孤单就破碎。 9、这个阳光灿烂的日子，珍藏所有痴情岁月的无奈，用点点微笑渲染出一片明媚的蓝空。 10、时光会老去，往事会微凉。静坐在窗前，掬一碗水，煮一壶茶，依旧是当年的那个味道，只不过冥冥中增了几许淡然。 11、我们一直在等待的归人，早已在缀染光阴的花事中，迷失了荒径，忘了回程。 12、人生，到底还是活一回心境。看重者心苦，看轻者洒脱；执着者迷，了悟者空；多欲者劳累，无欲者清闲。心淡了，幸福就多了。 13、每个人，都有一个世界，安静而孤独。 14、时间，实际上最没心没肺。 曾经的沧海桑田，不管曾经如何感动，随着时间的推移，一切都会被抹去，都会一点点顺水推舟地被淹没消耗掉。再坚强的人，也只有被迫选择做一个没心没肺的人，努力学会忘记、学会伪装、学会用美好未来欺骗眼前的寸步难行。 15、人的一生两个最大的财富是：你的才华和你的时间。才华越来越多，但是时间越来越少，我们的一生可以说是用时间来换取才华。如果一天天过去了，我们的时间少了，而才华没有增加，那就是虚度了时光。 16、人生没有真正的绝望。树，在秋天放下了落叶，心很疼，可是整个冬天，它让心在平静中积蓄力量。春天一到，芳华依然。 17、拾一片落叶，悉数生命脉络，那条条丝线诠释着轮回的渊源，步入平淡岁月，蓦然回首来时路，处处洒落着真切律动的心情，像极了一个个跳跃着的平平仄仄的字符，人生其实是一种又一种心情的集结。 18、人生如茶，静心以对。对错无辜，缘由前生。认得清，放下是聪明。看不透，一场梦无痕。不雨花犹落，无风絮自飞。应观法界性，一切惟心造。你来世界，请安住世界。你的微笑，犹如早春蔷薇，淡黄中淡香，悠远。 19、总有一双握过的手，轻轻抬起挥做了离别的姿态；总有一些欣喜的心情，被一段情深缘浅演变成离殇的况味。爱上一个人，留下一道美丽的伤口，疼了的时候，仍为他伴着柔软的泪流…… 20、花开花落，是一个季节走过的声音；云卷云舒，是一份情感路过的身影；潮涨潮退，是一股激情流过的岁月。不曾经历时光的疼，如何阅历沧桑的苦？不曾惹青丝，怎会乱流年。 21、谁能执守一颗心，直到永远？谁愿牵一人手，走过沧海桑田？爱过，痛过，哭过，笑过，就已足够。","categories":[{"name":"m-essay","slug":"m-essay","permalink":"http://starfishing.github.io/categories/m-essay/"}],"tags":[{"name":"mood","slug":"mood","permalink":"http://starfishing.github.io/tags/mood/"},{"name":"esssy","slug":"esssy","permalink":"http://starfishing.github.io/tags/esssy/"}]},{"title":"Flower Day","slug":"Flower Day","date":"2018-08-01T07:22:15.597Z","updated":"2018-08-06T01:29:00.287Z","comments":true,"path":"2018/08/01/Flower Day/","link":"","permalink":"http://starfishing.github.io/2018/08/01/Flower Day/","excerpt":"BOOK喜欢文字的人，喜欢把一份情怀寄托在那一段文字里，有点清高、有点孤傲、有点狂妄、有点忧郁，喜欢文字的人，很感性。","text":"BOOK喜欢文字的人，喜欢把一份情怀寄托在那一段文字里，有点清高、有点孤傲、有点狂妄、有点忧郁，喜欢文字的人，很感性。联想丰富，洞察力强，热爱生活；喜欢文字的人有时又很理性。表面上很难接近、很矜持，可一旦你走进他们的世界，打开了他们的心扉，你会看到一个真实而纯真、善良而孤独的心。","categories":[{"name":"essay","slug":"essay","permalink":"http://starfishing.github.io/categories/essay/"}],"tags":[{"name":"mood","slug":"mood","permalink":"http://starfishing.github.io/tags/mood/"},{"name":"esssy","slug":"esssy","permalink":"http://starfishing.github.io/tags/esssy/"},{"name":"hexo","slug":"hexo","permalink":"http://starfishing.github.io/tags/hexo/"}]},{"title":"IRON MAN","slug":"hello-world","date":"2018-08-01T01:14:07.304Z","updated":"2018-09-13T02:43:35.600Z","comments":true,"path":"2018/08/01/hello-world/","link":"","permalink":"http://starfishing.github.io/2018/08/01/hello-world/","excerpt":"懂了遗憾,就懂了人生。遗憾是一种感人的美,一种破碎的美人生有的时候,总是很讽刺.","text":"懂了遗憾,就懂了人生。遗憾是一种感人的美,一种破碎的美人生有的时候,总是很讽刺. 这是个开始书写属于你的故事一生有多长， 也不过三万天:永远有多远，回头看看已走过一半。走过坎坷，才知平安就好;尝过酸甜，才知平淡就好;历尽兴衰，才知知足就好;费尽思量，才知糊涂最好。一辈子不长，用心甘情愿的态度，过好咱下半辈子的平凡生活。","categories":[{"name":"essay","slug":"essay","permalink":"http://starfishing.github.io/categories/essay/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://starfishing.github.io/tags/hexo/"},{"name":"article","slug":"article","permalink":"http://starfishing.github.io/tags/article/"}]}]}